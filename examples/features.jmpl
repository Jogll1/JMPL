// --- JMPL v0-2-0 Full Features List ---
let start = clock()

// Comments
println("--- Comments ---")
// This is a comment

/* This is a
   multiline comment */

// Output
println("\n--- Output ---")
println("Hello, world!")

// Statements
println("\n--- Statements ---")
println("Statement 1");
println("Statement 2"); println("Statement 3")

// Variables
println("\n--- Variables ---")
let x = 5
println("x = " + x)
let π = 3.14
println("π = " + π)
let p = true
println("p = " + p)
let s = "Hi"
println("s = " + s)

x := 6
println("x = " + x)

// Sets
println("\n--- Sets ---")
let S = {1, 2, 3, 4, {5}, "Hi"}
println("S = " + S)
let T = {3 ... 10}
println("T = " + T)
let U = {10, 8 ... 0}
println("U = " + U)
println("")
println("S ∪ T = " + (S ∪ T))
println("S union T = " + (S union T))
println("U ∩ T = " + (U ∩ T))
println("U intersect T = " + (U intersect T))
println("U \\ T = " + (U \ T))
println("{1, 2} ⊆ S = " + ({1, 2} ⊆ S))
println("{1, 2} subseteq S = " + ({1, 2} subseteq S))
println("{3 ... 10} ⊂ T = " + ({3 ... 10} ⊂ T))
println("{3 ... 10} subset T = " + ({3 ... 10} subset T))
println("5 ∈ S = " + (5 ∈ S))
println("5 in S = " + (5 in S))
println("{5} ∈ S = " + ({5} ∈ S))

// Tuples
println("\n--- Tuple ---")
let t = (1, 2, 3)
println("t = " + t)
let u = (3, 5 ... 11)
println("u = " + u)
let v = (11, 4 ... -17)
println("v = " + v)
println("")
println("t[0] = " + t[0])
println("u[5] = " + u[3])

// Operators
println("\n--- Operators ---")
let p = true
println("p = " + p)
let q = false
println("q = " + q)
println("¬p = " + ¬p)
println("not p = " + not p)
println("p ∧ q = " + (p ∧ q))
println("p and q = " + (p and q))
println("p ∨ q = " + (p ∨ q))
println("p or q = " + (p or q))
println("")
println("p = q = " + (p = q))
println("S ≠ T = " + (S ≠ T))
println("S /= T = " + (S /= T))
println("1 < 4 = " + (1 < 4))
println("1 > 4 = " + (1 > 4))
println("1 ≤ 1 = " + (1 ≤ 1))
println("1 <= 1 = " + (1 <= 1))
println("1 ≥ 1 = " + (0 ≥ 1))
println("1 >= 1 = " + (0 >= 1))
println("")
println("1 + 4 = " + (1 + 4))
println("1 - 4 = " + (1 - 4))
println("2 * 4 = " + (2 * 4))
println("2 / 4 = " + (2 / 4))
println("2^4 = " + (2^4))
println("15 mod 4 = " + (15 mod 4))
println("15 % 4 = " + (15 % 4))
println("")
println("#S = " + #S)
println("#v = " + #v)
println("#(-1) = " + #(-1))
println("#(Hello) = " + #("Hello"))

// If Statements
println("\n---If Statements---")
println("if true then println(Hello) else println(Goodbye)")
if true then println("Hello") else println("Goodbye")
println("if false then \n    println(Hello)\nelse\n    println(Goodbye)")
if false then 
    println("Hello") 
else 
    println("Goodbye")

// While loops
println("\n---While Loops---")
let i = 0
println("i = " + i)
println("while i < 5 do\n    println(Hello)\n    i := i + 1")
while i < 5 do 
    println("Hello")
    i := i + 1

// For loop
println("\n---For Loops---")
let R = {1 ... 5}
println("R = " + R)
let total = 0
println("total = " + total)
println("for x ∈ R do\n    total := total + x")
for x ∈ R do 
    total := total + x
println("total = " + total)
total := 1
println("total = " + total)
println("for x ∈ R | x mod 2 = 0 do\n    total := total * x")
for x ∈ R | x mod 2 = 0 do 
    total := total * x
println("total = " + total)

// Functions
println("\n---Functions---")
func square(x) = x * x
println("square(4) = " + square(4))
func addOneDiv3(x) =
    let add = x + 1
    let div = add / 3
    div
println("addOneDiv3(4) = " + addOneDiv3(4))
func caller(f, x) = f(x)
println("caller(square, 3) = square(3) = " + caller(square, 3))
func factory() = 
    func add1(y) = y + 1
    add1
println("factory()(5) = add1(5) = " + factory()(5))
println("square(addOneDiv3(6)) = " + square(addOneDiv3(6)))
func explicitReturn(x) = 
    if x > 5 then
        return "X > 5"
    else
        return "X ≤ 5"
println("explicitReturn(6) = " + explicitReturn(6))

println("\n====End of Line====")
println("Time: " + (clock() - start))